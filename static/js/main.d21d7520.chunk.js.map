{"version":3,"sources":["object-detector.js","Prototype/components/TextField.jsx","Prototype/components/CustomerList.jsx","Prototype/index.jsx","index.jsx"],"names":["detectOnImage","graph","labels","imageNode","a","async","batched","tf","fromPixels","expandDims","shape","height","width","executeAsync","result","scoresTensor","boxesTensor","scores","dataSync","boxes","dispose","calculateMaxScores","maxScores","classes","prevBackend","indexTensor","nonMaxSuppression","indexes","map","index","boundingBox","buildBoundingBoxForResult","class","Math","round","score","numberOfBoxes","numberOfClasses","maxes","i","max","Number","MIN_VALUE","j","minY","minX","maxY","x","y","TextField","useState","value","setValue","handleChange","useCallback","newValue","sectioned","label","onChange","CustomerList","resourceName","singular","plural","items","id","url","name","location","renderItem","item","media","customer","size","accessibilityLabel","variation","Prototype","components","hasPage","includes","title","primaryAction","content","idx","key","detectOnImageFetch","modelPath","fetch","then","data","json","imageObjectDetector","reducer","state","type","payload","image","loading","results","status","clearCanvas","canvas","ctx","getContext","clearRect","drawResultBoxes","font","textHeight","parseInt","textBaseline","strokeStyle","lineWidth","fillStyle","strokeRect","textWidth","measureText","constructLabel","fillRect","fillText","classLabel","rootElement","document","getElementById","ReactDOM","render","reader","useMemo","FileReader","imageRef","useRef","filePickerRef","canvasRef","useReducer","dispatch","canvasSizes","canvasWidth","window","innerWidth","handleImageChange","selectedFile","target","files","readAsDataURL","useEffect","addEventListener","src","handleSetImage","current","console","log","length","handleShowExampleClick","openFilePicker","click","componentNames","className","href","rel","onClick","ref","alt"],"mappings":"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","file":"static/js/main.d21d7520.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs';\n\nexport default async function imageObjectDetector(modelPath) {\n  const graph = await tf.loadGraphModel(`${modelPath}/model.json`);\n  const labels = await fetch(`${modelPath}/labels.json`).then(data => data.json());\n  return async imageNode => await detectOnImage(graph, labels, imageNode);\n}\n\nasync function detectOnImage(graph, labels, imageNode) {\n  const batched = tf.tidy(() => {\n    const img = tf.browser.fromPixels(imageNode);\n    return img.expandDims(0);\n  });\n\n  const {shape: [_, height, width]} = batched;\n  const result = await graph.executeAsync(batched);\n  const [scoresTensor, boxesTensor] = result;\n\n  const scores = scoresTensor.dataSync();\n  const boxes = boxesTensor.dataSync();\n\n  batched.dispose();\n  tf.dispose(result);\n\n  const [maxScores, classes] = calculateMaxScores(\n    scores,\n    scoresTensor.shape[1],\n    scoresTensor.shape[2]\n  );\n\n  const prevBackend = tf.getBackend();\n  tf.setBackend('cpu');\n\n  const indexTensor = tf.tidy(() =>\n    tf.image.nonMaxSuppression(\n      tf.tensor2d(\n        boxes,\n        [boxesTensor.shape[1], boxesTensor.shape[3]]\n      ),\n      maxScores,\n      20,\n      0.5,\n      0.5\n    ),\n  );\n\n  const indexes = indexTensor.dataSync();\n  indexTensor.dispose();\n\n  tf.setBackend(prevBackend);\n\n  return [...indexes].map((index) => ({\n    boundingBox: buildBoundingBoxForResult(index, width, height, boxes),\n    class: labels[Math.round(classes[index])],\n    score: maxScores[index],\n  }));\n}\n\nfunction calculateMaxScores(scores, numberOfBoxes, numberOfClasses) {\n  const maxes = [];\n  const classes = [];\n\n  for (let i = 0; i < numberOfBoxes; i++) {\n    let max = Number.MIN_VALUE;\n    let index = -1;\n    for (let j = 0; j < numberOfClasses; j++) {\n      if (scores[i * numberOfClasses + j] > max) {\n        max = scores[i * numberOfClasses + j];\n        index = j;\n      }\n    }\n    maxes[i] = max;\n    classes[i] = index;\n  }\n\n  return [maxes, classes];\n}\n\nfunction buildBoundingBoxForResult(\n  index,\n  width,\n  height,\n  boxes,\n) {\n  const boundingBox = [];\n\n  for (let i = 0; i < 4; i++) {\n    boundingBox[i] = boxes[index * 4 + i];\n  }\n\n  const minY = boundingBox[0] * height;\n  const minX = boundingBox[1] * width;\n  const maxY = boundingBox[2] * height;\n  const maxX = boundingBox[3] * width;\n\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY,\n  };\n}\n","import React, {useState, useCallback} from 'react';\nimport {Card, TextField as PolarisTextField} from '@shopify/polaris';\n\nfunction TextField() {\n  const [value, setValue] = useState('');\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n  return (\n    <Card sectioned>\n      <PolarisTextField label=\"Text field\" value={value} onChange={handleChange} />\n    </Card>\n  );\n}\n\nexport default TextField;\n","import React, {useState} from 'react';\nimport {Card, ResourceList, ResourceItem, Avatar, TextStyle} from '@shopify/polaris';\n\nfunction CustomerList() {\n  return (\n    <Card>\n      <ResourceList\n        resourceName={{singular: 'customer', plural: 'customers'}}\n        items={[\n          {\n            id: 341,\n            url: 'customers/341',\n            name: 'Mae Jemison',\n            location: 'Decatur, USA',\n          },\n          {\n            id: 256,\n            url: 'customers/256',\n            name: 'Ellen Ochoa',\n            location: 'Los Angeles, USA',\n          },\n          {\n            id: 214,\n            url: 'customers/213',\n            name: 'John Divee',\n            location: 'Ottawa, Canada',\n          }\n        ]}\n        renderItem={(item) => {\n          const {id, url, name, location} = item;\n          const media = <Avatar customer size=\"medium\" name={name} />;\n\n          return (\n            <ResourceItem\n              id={id}\n              url={url}\n              media={media}\n              accessibilityLabel={`View details for ${name}`}\n            >\n              <h3>\n                <TextStyle variation=\"strong\">{name}</TextStyle>\n              </h3>\n              <div>{location}</div>\n            </ResourceItem>\n          );\n        }}\n      />\n    </Card>\n  );\n}\n\nexport default CustomerList;\n","import React from 'react';\nimport {AppProvider, Page} from '@shopify/polaris';\nimport \"@shopify/polaris/styles.css\";\n\nimport TextField from './components/TextField';\nimport CustomerList from './components/CustomerList';\n\nfunction Prototype({components}) {\n  const hasPage = components.includes('Page');\n  return (\n    <AppProvider>\n      <Page\n        title={hasPage ? 'Page' : null}\n        primaryAction={hasPage ? {content: 'Save'} : null}\n      >\n        {components.map((name, idx) => {\n          switch(name) {\n            case 'TextField':\n              return <TextField key={idx} />;\n            case 'CustomerList':\n                return <CustomerList key={idx} />;\n          }\n        })}\n      </Page>\n    </AppProvider>\n  );\n}\n\nexport default Prototype;\n","import React, {useCallback, useEffect, useMemo, useReducer, useRef} from 'react';\nimport ReactDOM from 'react-dom';\nimport imageObjectDetector from './object-detector';\nimport Prototype from './Prototype';\nimport './main.scss';\n\nlet detectOnImageFetch = imageObjectDetector('model');\n\nfunction reducer(state, {type, payload}) {\n  const {image} = state;\n\n  switch(type) {\n    case 'loading':\n      if (image === payload.image) {\n        return state;\n      }\n      return {loading: true, image: payload.image, results: [], status: 'Loading...'};\n    case 'success':\n      return {loading: false, image, results: payload.results, status: 'Upload a wireframe drawing'};\n    case 'error':\n      return {\n        loading: false,\n        image,\n        results: [],\n        status: 'No components detected. Please try again or check the console for the raw output.'\n      };\n  }\n}\n\nfunction App() {\n  const reader = useMemo(() => new FileReader(), []);\n  const imageRef = useRef();\n  const filePickerRef = useRef();\n  const canvasRef = useRef();\n\n  const [{loading, image, status, results}, dispatch] = useReducer(reducer, {\n    loading: false,\n    image: '',\n    status: 'Upload a wireframe drawing',\n    results: [],\n  });\n\n  const canvasSizes = useMemo(() => {\n    const canvasWidth = (window.innerWidth < 600 ? window.innerWidth : 600) - (3*16);\n    return {\n      width: canvasWidth,\n      height: canvasWidth - 100,\n    };\n  }, [window.innerWidth]);\n\n  const handleImageChange = useCallback(({target: {files: [selectedFile]}}) => {\n    if (!selectedFile) {\n      return;\n    }\n    reader.readAsDataURL(selectedFile);\n  }, [reader]);\n\n  useEffect(\n    () => {\n      reader.addEventListener('load', ({target: {result: src}}) => handleSetImage(src));\n      imageRef.current.addEventListener('load', async () => {\n        clearCanvas(canvasRef.current);\n\n        const detectOnImage = await detectOnImageFetch;\n        const results = await detectOnImage(imageRef.current);\n        console.log(results);\n\n        if (results.length > 0) {\n          drawResultBoxes(canvasRef.current, results);\n          dispatch({type: 'success', payload: {results}});\n        } else {\n          dispatch({type: 'error'});\n        }\n      });\n    },\n    [reader, canvasRef, imageRef, detectOnImageFetch]\n  );\n\n  const handleShowExampleClick = useCallback(() => handleSetImage('wireframe-example.jpg'), []);\n\n  const openFilePicker = useCallback(() => {\n    if (loading) {\n      return;\n    }\n    filePickerRef.current.click();\n  }, [loading]);\n\n  const handleSetImage = useCallback(async (src) => {\n    if (loading) {\n      return;\n    }\n    dispatch({type: 'loading', payload: {image: src}});\n  }, [loading]);\n\n  const componentNames = results.map(({class: label}) => label);\n\n  return (\n    <>\n      <main className=\"control-board\">\n        <p className=\"intro container\">\n          This <a href=\"https://github.com/kvendrik/polaris-whiteboarder\" target=\"_blank\" rel=\"noopener noreferrer\">experiment</a> creates simple <a href=\"https://polaris.shopify.com\" target=\"_blank\" rel=\"noopener noreferrer\">Polaris</a> prototypes from <a href=\"https://github.com/kvendrik/polaris-ml/tree/master/training-data\" target=\"_blank\" rel=\"noopener noreferrer\">wireframes drawn on a whiteboard</a>.\n        </p>\n        <section className=\"result-status container\">\n          <p>\n            <button className=\"status\" onClick={openFilePicker}>{status}</button>\n            <br />\n            <small>Don't feel like drawing? <button onClick={handleShowExampleClick}>View an example</button></small>\n          </p>\n          <div className=\"image-container\">\n            <canvas className=\"image-container__canvas\" ref={canvasRef} width={canvasSizes.width} height={canvasSizes.height} />\n            <img src={image} ref={imageRef} alt=\"\" width={canvasSizes.width} height={canvasSizes.height} />\n          </div>\n          <input className=\"file-picker\" ref={filePickerRef} type=\"file\" onChange={handleImageChange} />\n        </section>\n      </main>\n      {results.length > 0 && (\n        <>\n          <hr />\n          <Prototype components={componentNames} />\n        </>\n      )}\n    </>\n  );\n}\n\nfunction clearCanvas(canvas) {\n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n}\n\nfunction drawResultBoxes(canvas, results) {\n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  const font = '14px Open Sans';\n  const textHeight = parseInt(font, 10);\n\n  ctx.font = font;\n  ctx.textBaseline = 'top';\n  ctx.strokeStyle = '#2da15f';\n  ctx.lineWidth = 4;\n  ctx.fillStyle = '#2da15f';\n\n  for (const {class: label, score, boundingBox: {x, y, width, height}} of results) {\n    ctx.strokeRect(x, y, width, height);\n    const textWidth = ctx.measureText(constructLabel(label, score)).width;\n    ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n  }\n\n  for (const {class: label, score, boundingBox: {x, y}} of results) {\n    ctx.fillStyle = '#000000';\n    ctx.fillText(constructLabel(label, score), x, y);\n  }\n\n  function constructLabel(classLabel, score) {\n    return `${classLabel} (${Math.round(score*100)}%)`;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}