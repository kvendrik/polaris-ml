{"version":3,"sources":["index.js"],"names":["detectObjectsInImage","imageNode","a","async","objectDetector","load","model","detect","rootElement","document","getElementById","ReactDOM","render","reader","useMemo","FileReader","imageRef","useRef","filePickerRef","useState","image","setImage","loading","setLoading","status","setStatus","results","setResults","handleImageChange","useCallback","selectedFile","target","files","readAsDataURL","useEffect","addEventListener","src","result","current","console","log","length","handleGetStartedClick","click","resultsTable","border","map","index","label","class","score","key","className","href","rel","onClick","disabled","ref","type","onChange","alt"],"mappings":"oXA6EA,SAAeA,EAAqBC,GAApC,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACsBE,IAAeC,KAAK,UAD1C,cACQC,EADR,yBAESA,EAAMC,OAAON,IAFtB,qCAKA,IAAMO,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,mBA9EhB,WACE,IAAMC,EAASC,mBAAQ,kBAAM,IAAIC,aAAc,IACzCC,EAAWC,mBACXC,EAAgBD,mBAHT,EAKaE,mBAAS,IALtB,mBAKNC,EALM,KAKCC,EALD,OAMiBF,oBAAS,GAN1B,mBAMNG,EANM,KAMGC,EANH,OAOeJ,mBAAS,IAPxB,mBAONK,EAPM,KAOEC,EAPF,OAQiBN,mBAAS,IAR1B,mBAQNO,EARM,KAQGC,EARH,KAUPC,EAAoBC,uBAAY,gBAAmBC,EAAnB,cAAEC,OAASC,MAAX,aACpCnB,EAAOoB,cAAcH,KACrB,CAACjB,IAGHqB,qBAAU,WACRrB,EAAOsB,iBAAiB,QAAQ,6BAAAjC,EAAAC,OAAA,uDAAyBiC,EAAzB,EAAQL,OAASM,OAC/ChB,EAASe,GAETX,EAAU,cACVF,GAAW,GACXI,EAAW,IALmB,WAAAzB,EAAA,MAORF,EAAqBgB,EAASsB,UAPtB,OAOxBZ,EAPwB,OAQ9Ba,QAAQC,IAAId,GAERA,EAAQe,OAAS,GACnBhB,EAAU,IACVE,EAAWD,IAEXD,EAAU,qFAGZF,GAAW,GAjBmB,2CAmB/B,CAACV,IAEJ,IAAM6B,EAAwBb,uBAAY,kBAAMX,EAAcoB,QAAQK,UAAS,IAEzEC,EAAelB,EAAQe,OAAS,GACpC,2BAAOI,OAAO,KACZ,+BACE,4BACE,yCACA,4CAGJ,+BACGnB,EAAQoB,KAAI,WAAwBC,GAAxB,IAASC,EAAT,EAAEC,MAAcC,EAAhB,EAAgBA,MAAhB,OACX,wBAAIC,IAAG,UAAKH,GAAL,OAAaE,GAAb,OAAqBH,IAC1B,4BAAKC,GACL,4BAAa,IAARE,EAAL,WAOV,OACE,0BAAME,UAAU,aACd,uBAAGA,UAAU,SAAb,QAA0B,uBAAGC,KAAK,yCAAyCtB,OAAO,SAASuB,IAAI,uBAArE,cAA1B,2BAA2J,uBAAGD,KAAK,mEAAmEtB,OAAO,SAASuB,IAAI,uBAA/F,8BAA3J,2CAAsV,uBAAGD,KAAK,yCAAyCtB,OAAO,SAASuB,IAAI,uBAArE,sBAAtV,cACA,4BAAQC,QAASb,EAAuBc,SAAUlC,GAAlD,oBACA,2BAAO8B,UAAU,cAAcK,IAAKvC,EAAewC,KAAK,OAAOC,SAAU/B,IACzE,yBAAKwB,UAAU,iBACb,2BAAI5B,GACHoB,EACD,yBAAKQ,UAAU,QAAQhB,IAAKhB,EAAOqC,IAAKzC,EAAU4C,IAAI,SAY9C,MAASpD,I","file":"static/js/main.728bd96f.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useMemo, useState, useRef} from 'react';\nimport ReactDOM from 'react-dom';\nimport objectDetector from '@cloud-annotations/object-detection';\nimport './main.scss';\n\nfunction App() {\n  const reader = useMemo(() => new FileReader(), []);\n  const imageRef = useRef();\n  const filePickerRef = useRef();\n\n  const [image, setImage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [status, setStatus] = useState('');\n  const [results, setResults] = useState([]);\n\n  const handleImageChange = useCallback(({target: {files: [selectedFile]}}) =>\n    reader.readAsDataURL(selectedFile),\n    [reader]\n  );\n\n  useEffect(() => {\n    reader.addEventListener('load', async ({target: {result: src}}) => {\n      setImage(src);\n\n      setStatus('Loading...');\n      setLoading(true);\n      setResults([]);\n\n      const results = await detectObjectsInImage(imageRef.current);\n      console.log(results);\n\n      if (results.length > 0) {\n        setStatus('');\n        setResults(results);\n      } else {\n        setStatus('No components detected. Please try again or check the console for the raw output.');\n      }\n\n      setLoading(false);\n    });\n  }, [reader]);\n\n  const handleGetStartedClick = useCallback(() => filePickerRef.current.click(), []);\n\n  const resultsTable = results.length > 0 && (\n    <table border=\"1\">\n      <thead>\n        <tr>\n          <th>Component</th>\n          <th>Confidence</th>\n        </tr>\n      </thead>\n      <tbody>\n        {results.map(({class: label, score}, index) => (\n          <tr key={`${label}${score}${index}`}>\n            <td>{label}</td>\n            <td>{score * 100}%</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n\n  return (\n    <main className=\"container\">\n      <p className=\"intro\">This <a href=\"https://github.com/kvendrik/polaris-ml\" target=\"_blank\" rel=\"noopener noreferrer\">experiment</a> allows you to upload a <a href=\"https://github.com/kvendrik/polaris-ml/tree/master/training-data\" target=\"_blank\" rel=\"noopener noreferrer\">wireframe you sketched out</a> on a whiteboard and will tell you what <a href=\"https://polaris.shopify.com/components\" target=\"_blank\" rel=\"noopener noreferrer\">Polaris components</a> you drew.</p>\n      <button onClick={handleGetStartedClick} disabled={loading}>Upload a drawing</button>\n      <input className=\"file-picker\" ref={filePickerRef} type=\"file\" onChange={handleImageChange} />\n      <div className=\"result-status\">\n        <p>{status}</p>\n        {resultsTable}\n        <img className=\"image\" src={image} ref={imageRef} alt=\"\" />\n      </div>\n    </main>\n  );\n}\n\nasync function detectObjectsInImage(imageNode) {\n  const model = await objectDetector.load('model');\n  return model.detect(imageNode);\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}