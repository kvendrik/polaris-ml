{"version":3,"sources":["Prototype/components/TextField.jsx","Prototype/components/CustomerList.jsx","Prototype/index.jsx","index.js"],"names":["TextField","useState","value","setValue","handleChange","useCallback","newValue","sectioned","label","onChange","CustomerList","resourceName","singular","plural","items","id","url","name","location","renderItem","item","media","customer","size","accessibilityLabel","variation","Prototype","components","hasPage","includes","title","primaryAction","content","map","idx","key","detectObjectsInImage","imageNode","a","async","objectDetector","load","model","detect","clearCanvas","canvas","ctx","getContext","clearRect","width","height","drawResultBoxes","results","font","textHeight","parseInt","textBaseline","strokeStyle","lineWidth","fillStyle","class","score","bbox","x","y","strokeRect","textWidth","measureText","constructLabel","fillRect","fillText","classLabel","Math","round","rootElement","document","getElementById","ReactDOM","render","reader","useMemo","FileReader","imageRef","useRef","filePickerRef","canvasRef","image","setImage","status","setStatus","setResults","isLoading","canvasSizes","canvasWidth","window","innerWidth","handleImageChange","selectedFile","target","files","readAsDataURL","useEffect","addEventListener","src","result","detectOnImagePath","handleShowExampleClick","openFilePicker","current","click","console","log","length","componentNames","className","href","rel","onClick","ref","alt","type"],"mappings":"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","file":"static/js/main.24faa66e.chunk.js","sourcesContent":["import React, {useState, useCallback} from 'react';\nimport {Card, TextField as PolarisTextField} from '@shopify/polaris';\n\nfunction TextField() {\n  const [value, setValue] = useState('');\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n  return (\n    <Card sectioned>\n      <PolarisTextField label=\"Text field\" value={value} onChange={handleChange} />\n    </Card>\n  );\n}\n\nexport default TextField;\n","import React, {useState} from 'react';\nimport {Card, ResourceList, ResourceItem, Avatar, TextStyle} from '@shopify/polaris';\n\nfunction CustomerList() {\n  return (\n    <Card>\n      <ResourceList\n        resourceName={{singular: 'customer', plural: 'customers'}}\n        items={[\n          {\n            id: 341,\n            url: 'customers/341',\n            name: 'Mae Jemison',\n            location: 'Decatur, USA',\n          },\n          {\n            id: 256,\n            url: 'customers/256',\n            name: 'Ellen Ochoa',\n            location: 'Los Angeles, USA',\n          },\n          {\n            id: 214,\n            url: 'customers/213',\n            name: 'John Divee',\n            location: 'Ottawa, Canada',\n          }\n        ]}\n        renderItem={(item) => {\n          const {id, url, name, location} = item;\n          const media = <Avatar customer size=\"medium\" name={name} />;\n\n          return (\n            <ResourceItem\n              id={id}\n              url={url}\n              media={media}\n              accessibilityLabel={`View details for ${name}`}\n            >\n              <h3>\n                <TextStyle variation=\"strong\">{name}</TextStyle>\n              </h3>\n              <div>{location}</div>\n            </ResourceItem>\n          );\n        }}\n      />\n    </Card>\n  );\n}\n\nexport default CustomerList;\n","import React from 'react';\nimport {AppProvider, Page} from '@shopify/polaris';\nimport \"@shopify/polaris/styles.css\";\n\nimport TextField from './components/TextField';\nimport CustomerList from './components/CustomerList';\n\nfunction Prototype({components}) {\n  const hasPage = components.includes('Page');\n  return (\n    <AppProvider>\n      <Page\n        title={hasPage ? 'Page' : null}\n        primaryAction={hasPage ? {content: 'Save'} : null}\n      >\n        {components.map((name, idx) => {\n          switch(name) {\n            case 'TextField':\n              return <TextField key={idx} />;\n            case 'CustomerList':\n                return <CustomerList key={idx} />;\n          }\n        })}\n      </Page>\n    </AppProvider>\n  );\n}\n\nexport default Prototype;\n","import React, {useCallback, useEffect, useMemo, useState, useRef} from 'react';\nimport ReactDOM from 'react-dom';\nimport objectDetector from '@cloud-annotations/object-detection';\nimport Prototype from './Prototype';\nimport './main.scss';\n\nfunction App() {\n  const reader = useMemo(() => new FileReader(), []);\n  const imageRef = useRef();\n  const filePickerRef = useRef();\n  const canvasRef = useRef();\n\n  const [image, setImage] = useState('');\n  const [status, setStatus] = useState('Upload a wireframe drawing');\n  const [results, setResults] = useState([]);\n  const isLoading = status === 'Loading...';\n\n  const canvasSizes = useMemo(() => {\n    const canvasWidth = (window.innerWidth < 600 ? window.innerWidth : 600) - (3*16);\n    return {\n      width: canvasWidth,\n      height: canvasWidth - 100,\n    };\n  }, [window.innerWidth]);\n\n  const handleImageChange = useCallback(({target: {files: [selectedFile]}}) => {\n    if (!selectedFile) {\n      return;\n    }\n    reader.readAsDataURL(selectedFile);\n  }, [reader]);\n\n  useEffect(\n    () => reader.addEventListener('load', ({target: {result: src}}) => detectOnImagePath(src)),\n    [reader]\n  );\n\n  const handleShowExampleClick = useCallback(() => detectOnImagePath('wireframe-example.jpg'), []);\n\n  const openFilePicker = useCallback(() => {\n    if (isLoading) {\n      return;\n    }\n    filePickerRef.current.click();\n  }, [isLoading]);\n\n  const detectOnImagePath = useCallback(async (src) => {\n    if (isLoading) {\n      return;\n    }\n\n    setImage(src);\n    clearCanvas(canvasRef.current);\n\n    setStatus('Loading...');\n    setResults([]);\n\n    const results = await detectObjectsInImage(imageRef.current);\n    console.log(results);\n\n    if (results.length > 0) {\n      setStatus('Upload a wireframe drawing');\n      drawResultBoxes(canvasRef.current, results);\n      setResults(results);\n    } else {\n      setStatus('No components detected. Please try again or check the console for the raw output.');\n    }\n  }, [isLoading, canvasRef, imageRef]);\n\n  const componentNames = results.map(({class: label}) => label);\n  console.log(componentNames);\n\n  return (\n    <>\n      <main className=\"control-board\">\n        <p className=\"intro container\">\n          This <a href=\"https://github.com/kvendrik/polaris-whiteboarder\" target=\"_blank\" rel=\"noopener noreferrer\">experiment</a> creates simple <a href=\"https://polaris.shopify.com\" target=\"_blank\" rel=\"noopener noreferrer\">Polaris</a> prototypes from <a href=\"https://github.com/kvendrik/polaris-ml/tree/master/training-data\" target=\"_blank\" rel=\"noopener noreferrer\">wireframes drawn on a whiteboard</a>.\n        </p>\n        <section className=\"result-status container\">\n          <p>\n            <button className=\"status\" onClick={openFilePicker}>{status}</button>\n            <br />\n            <small>Don't feel like drawing? <button onClick={handleShowExampleClick}>View an example</button></small>\n          </p>\n          <div className=\"image-container\">\n            <canvas className=\"image-container__canvas\" ref={canvasRef} width={canvasSizes.width} height={canvasSizes.height} />\n            <img src={image} ref={imageRef} alt=\"\" width={canvasSizes.width} height={canvasSizes.height} />\n          </div>\n          <input className=\"file-picker\" ref={filePickerRef} type=\"file\" onChange={handleImageChange} />\n        </section>\n      </main>\n      {results.length > 0 && (\n        <>\n          <hr />\n          <Prototype components={componentNames} />\n        </>\n      )}\n    </>\n  );\n}\n\nasync function detectObjectsInImage(imageNode) {\n  const model = await objectDetector.load('model');\n  return model.detect(imageNode);\n}\n\nfunction clearCanvas(canvas) {\n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n}\n\nfunction drawResultBoxes(canvas, results) {\n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  const font = '14px Open Sans';\n  const textHeight = parseInt(font, 10);\n\n  ctx.font = font;\n  ctx.textBaseline = 'top';\n  ctx.strokeStyle = '#2da15f';\n  ctx.lineWidth = 4;\n  ctx.fillStyle = '#2da15f';\n\n  for (const {class: label, score, bbox: [x, y, width, height]} of results) {\n    ctx.strokeRect(x, y, width, height);\n    const textWidth = ctx.measureText(constructLabel(label, score)).width;\n    ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n  }\n\n  for (const {class: label, score, bbox: [x, y]} of results) {\n    ctx.fillStyle = '#000000';\n    ctx.fillText(constructLabel(label, score), x, y);\n  }\n\n  function constructLabel(classLabel, score) {\n    return `${classLabel} (${Math.round(score*100)}%)`;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}