{"version":3,"sources":["index.js"],"names":["detectObjectsInImage","imageNode","a","async","objectDetector","load","model","detect","clearCanvas","canvas","ctx","getContext","clearRect","width","height","drawResultBoxes","results","font","textHeight","parseInt","textBaseline","strokeStyle","lineWidth","fillStyle","label","class","score","bbox","x","y","strokeRect","textWidth","measureText","constructLabel","fillRect","fillText","classLabel","Math","round","rootElement","document","getElementById","ReactDOM","render","reader","useMemo","FileReader","imageRef","useRef","filePickerRef","canvasRef","useState","image","setImage","status","setStatus","setResults","isLoading","handleImageChange","useCallback","selectedFile","target","files","readAsDataURL","useEffect","addEventListener","src","result","current","console","log","length","openFilePicker","click","resultStatusClassName","className","href","rel","onClick","ref","alt","type","onChange"],"mappings":"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","file":"static/js/main.4680950d.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useMemo, useState, useRef} from 'react';\nimport ReactDOM from 'react-dom';\nimport objectDetector from '@cloud-annotations/object-detection';\nimport './main.scss';\n\nfunction App() {\n  const reader = useMemo(() => new FileReader(), []);\n  const imageRef = useRef();\n  const filePickerRef = useRef();\n  const canvasRef = useRef();\n\n  const [image, setImage] = useState('');\n  const [status, setStatus] = useState('Click anywhere to begin');\n  const [results, setResults] = useState([]);\n  const isLoading = status === 'Loading...';\n\n  const handleImageChange = useCallback(({target: {files: [selectedFile]}}) => {\n    if (!selectedFile) {\n      return;\n    }\n    reader.readAsDataURL(selectedFile);\n  }, [reader]);\n\n  useEffect(() => {\n    reader.addEventListener('load', async ({target: {result: src}}) => {\n      setImage(src);\n      clearCanvas(canvasRef.current);\n\n      setStatus('Loading...');\n      setResults([]);\n\n      const results = await detectObjectsInImage(imageRef.current);\n      console.log(results);\n\n      if (results.length > 0) {\n        setStatus('Click anywhere to go again');\n        drawResultBoxes(canvasRef.current, results);\n        setResults(results);\n      } else {\n        setStatus('No components detected. Please try again or check the console for the raw output.');\n      }\n    });\n  }, [reader]);\n\n  const openFilePicker = useCallback(() => {\n    if (isLoading) {\n      return;\n    }\n    filePickerRef.current.click();\n  }, [isLoading]);\n\n  const resultStatusClassName = `result-status container ${isLoading ? 'result-status--loading' : ''}`;\n\n  return (\n    <main className=\"page-wrapper\">\n      <section className=\"intro\">\n        <p className=\"container\">\n          This <a href=\"https://github.com/kvendrik/polaris-ml\" target=\"_blank\" rel=\"noopener noreferrer\">experiment</a> allows you to upload a <a href=\"https://github.com/kvendrik/polaris-ml/tree/master/training-data\" target=\"_blank\" rel=\"noopener noreferrer\">wireframe you sketched out</a> on a whiteboard and will tell you what <a href=\"https://polaris.shopify.com/components\" target=\"_blank\" rel=\"noopener noreferrer\">Polaris components</a> you drew.\n        </p>\n      </section>\n      <section className={resultStatusClassName} onClick={openFilePicker}>\n        <p>{status}</p>\n        <div className=\"image-container\">\n          <canvas className=\"image-container__canvas\" ref={canvasRef} width=\"600\" height=\"500\" />\n          <img src={image} ref={imageRef} alt=\"\" width=\"600\" height=\"500\" />\n        </div>\n        <input className=\"file-picker\" ref={filePickerRef} type=\"file\" onChange={handleImageChange} />\n      </section>\n    </main>\n  );\n}\n\nasync function detectObjectsInImage(imageNode) {\n  const model = await objectDetector.load('model');\n  return model.detect(imageNode);\n}\n\nfunction clearCanvas(canvas) {\n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n}\n\nfunction drawResultBoxes(canvas, results) {\n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  const font = '14px Open Sans';\n  const textHeight = parseInt(font, 10);\n\n  ctx.font = font;\n  ctx.textBaseline = 'top';\n  ctx.strokeStyle = '#2da15f';\n  ctx.lineWidth = 4;\n  ctx.fillStyle = '#2da15f';\n\n  for (const {class: label, score, bbox: [x, y, width, height]} of results) {\n    ctx.strokeRect(x, y, width, height);\n    const textWidth = ctx.measureText(constructLabel(label, score)).width;\n    ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n  }\n\n  for (const {class: label, score, bbox: [x, y]} of results) {\n    ctx.fillStyle = '#000000';\n    ctx.fillText(constructLabel(label, score), x, y);\n  }\n\n  function constructLabel(classLabel, score) {\n    return `${classLabel} (${Math.round(score*100)}%)`;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}