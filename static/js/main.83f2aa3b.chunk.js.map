{"version":3,"sources":["index.js"],"names":["STATUS_MESSAGES","idle","loading","noResults","detectObjectsInImage","imageNode","a","async","objectDetector","load","model","detect","rootElement","document","getElementById","ReactDOM","render","reader","useMemo","FileReader","imageRef","useRef","useState","image","setImage","status","setStatus","results","setResults","handleImageChange","useCallback","selectedFile","target","files","readAsDataURL","useEffect","addEventListener","src","result","current","console","log","length","resultsTable","border","map","index","label","class","score","key","className","type","onChange","ref","alt","href","rel"],"mappings":"6WAKMA,G,OAAkB,CACtBC,KAAM,mDACNC,QAAS,aACTC,UAAW,sFAkEb,SAAeC,EAAqBC,GAApC,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACsBE,IAAeC,KAAK,WAD1C,cACQC,EADR,yBAESA,EAAMC,OAAON,IAFtB,qCAKA,IAAMO,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,mBArEhB,WACE,IAAMC,EAASC,mBAAQ,kBAAM,IAAIC,aAAc,IACzCC,EAAWC,mBAFJ,EAGaC,mBAAS,IAHtB,mBAGNC,EAHM,KAGCC,EAHD,OAKeF,mBAAStB,EAAgBC,MALxC,mBAKNwB,EALM,KAKEC,EALF,OAMiBJ,mBAAS,IAN1B,mBAMNK,EANM,KAMGC,EANH,KAQPC,EAAoBC,uBAAY,gBAAmBC,EAAnB,cAAEC,OAASC,MAAX,aACpChB,EAAOiB,cAAcH,KACrB,CAACd,IAGHkB,qBAAU,WACRlB,EAAOmB,iBAAiB,QAAQ,6BAAA9B,EAAAC,OAAA,uDAAyB8B,EAAzB,EAAQL,OAASM,OAC/Cd,EAASa,GACTX,EAAU1B,EAAgBE,SAC1B0B,EAAW,IAHmB,WAAAtB,EAAA,MAKRF,EAAqBgB,EAASmB,UALtB,OAKxBZ,EALwB,OAM9Ba,QAAQC,IAAId,GAERA,EAAQe,OAAS,GACnBhB,EAAU1B,EAAgBC,MAC1B2B,EAAWD,IAEXD,EAAU1B,EAAgBG,WAZE,0CAe/B,CAACc,IAEJ,IAAM0B,EAAehB,EAAQe,OAAS,GACpC,2BAAOE,OAAO,KACZ,+BACE,4BACE,qCACA,uCAGJ,+BACGjB,EAAQkB,KAAI,WAAwBC,GAAxB,IAASC,EAAT,EAAEC,MAAcC,EAAhB,EAAgBA,MAAhB,OACX,wBAAIC,IAAG,UAAKH,GAAL,OAAaE,GAAb,OAAqBH,IAC1B,4BAAKC,GACL,4BAAKE,SAOf,OACE,0BAAME,UAAU,aACd,2BAAI1B,GACJ,2BAAO2B,KAAK,OAAOC,SAAUxB,IAC5Bc,EACD,yBAAKQ,UAAU,QAAQd,IAAKd,EAAO+B,IAAKlC,EAAUmC,IAAI,KACtD,uBAAGJ,UAAU,WAAb,+CAC8C,uBAAGK,KAAK,mEAAmExB,OAAO,SAASyB,IAAI,uBAA/F,YAD9C,QAaU,MAAS7C,I","file":"static/js/main.83f2aa3b.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useMemo, useState, useRef} from 'react';\nimport ReactDOM from 'react-dom';\nimport objectDetector from '@cloud-annotations/object-detection';\nimport './main.scss';\n\nconst STATUS_MESSAGES = {\n  idle: 'Enter a whiteboard sketch using the file picker.',\n  loading: 'Loading...',\n  noResults: 'No components detected. Please try again of check the console for the raw output.'\n};\n\nfunction App() {\n  const reader = useMemo(() => new FileReader(), []);\n  const imageRef = useRef();\n  const [image, setImage] = useState('');\n\n  const [status, setStatus] = useState(STATUS_MESSAGES.idle);\n  const [results, setResults] = useState([]);\n\n  const handleImageChange = useCallback(({target: {files: [selectedFile]}}) =>\n    reader.readAsDataURL(selectedFile),\n    [reader]\n  );\n\n  useEffect(() => {\n    reader.addEventListener('load', async ({target: {result: src}}) => {\n      setImage(src);\n      setStatus(STATUS_MESSAGES.loading);\n      setResults([]);\n\n      const results = await detectObjectsInImage(imageRef.current);\n      console.log(results);\n\n      if (results.length > 0) {\n        setStatus(STATUS_MESSAGES.idle);\n        setResults(results);\n      } else {\n        setStatus(STATUS_MESSAGES.noResults);\n      }\n    });\n  }, [reader]);\n\n  const resultsTable = results.length > 0 && (\n    <table border=\"1\">\n      <thead>\n        <tr>\n          <th>Class</th>\n          <th>Score</th>\n        </tr>\n      </thead>\n      <tbody>\n        {results.map(({class: label, score}, index) => (\n          <tr key={`${label}${score}${index}`}>\n            <td>{label}</td>\n            <td>{score}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n\n  return (\n    <main className=\"container\">\n      <p>{status}</p>\n      <input type=\"file\" onChange={handleImageChange} />\n      {resultsTable}\n      <img className=\"image\" src={image} ref={imageRef} alt=\"\" />\n      <p className=\"subdued\">\n        Not sure what to sketch? Have a look at the <a href=\"https://github.com/kvendrik/polaris-ml/tree/master/training-data\" target=\"_blank\" rel=\"noopener noreferrer\">examples</a>.\n      </p>\n    </main>\n  );\n}\n\nasync function detectObjectsInImage(imageNode) {\n  const model = await objectDetector.load('/model');\n  return model.detect(imageNode);\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}