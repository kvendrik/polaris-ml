{"version":3,"sources":["object-detector.js","Prototype/components/TextField.jsx","Prototype/components/CustomerList.jsx","Prototype/index.jsx","index.js"],"names":["imageObjectDetector","modelPath","a","async","tf","graph","fetch","then","data","json","labels","imageNode","detectOnImage","batched","fromPixels","expandDims","shape","height","width","executeAsync","result","scoresTensor","boxesTensor","scores","dataSync","boxes","dispose","calculateMaxScores","maxScores","classes","prevBackend","indexTensor","nonMaxSuppression","indexes","map","index","boundingBox","buildBoundingBoxForResult","class","Math","round","score","numberOfBoxes","numberOfClasses","maxes","i","max","Number","MIN_VALUE","j","minY","minX","maxY","x","y","TextField","useState","value","setValue","handleChange","useCallback","newValue","sectioned","label","onChange","CustomerList","resourceName","singular","plural","items","id","url","name","location","renderItem","item","media","customer","size","accessibilityLabel","variation","Prototype","components","hasPage","includes","title","primaryAction","content","idx","key","clearCanvas","canvas","ctx","getContext","clearRect","drawResultBoxes","results","font","textHeight","parseInt","textBaseline","strokeStyle","lineWidth","fillStyle","strokeRect","textWidth","measureText","constructLabel","fillRect","fillText","classLabel","rootElement","document","getElementById","ReactDOM","render","reader","useMemo","FileReader","imageRef","useRef","filePickerRef","canvasRef","image","setImage","status","setStatus","setResults","isLoading","canvasSizes","canvasWidth","window","innerWidth","handleImageChange","selectedFile","target","files","readAsDataURL","useEffect","addEventListener","src","detectOnImagePath","handleShowExampleClick","openFilePicker","current","click","console","log","length","componentNames","className","href","rel","onClick","ref","alt","type"],"mappings":"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","file":"static/js/main.be7c7dc7.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs';\n\nexport default async function imageObjectDetector(modelPath) {\n  const graph = await tf.loadGraphModel(`${modelPath}/model.json`);\n  const labels = await fetch(`${modelPath}/labels.json`).then(data => data.json());\n  return async imageNode => await detectOnImage(graph, labels, imageNode);\n}\n\nasync function detectOnImage(graph, labels, imageNode) {\n  const batched = tf.tidy(() => {\n    const img = tf.browser.fromPixels(imageNode);\n    return img.expandDims(0);\n  });\n\n  const {shape: [_, height, width]} = batched;\n  const result = await graph.executeAsync(batched);\n  const [scoresTensor, boxesTensor] = result;\n\n  const scores = scoresTensor.dataSync();\n  const boxes = boxesTensor.dataSync();\n\n  batched.dispose();\n  tf.dispose(result);\n\n  const [maxScores, classes] = calculateMaxScores(\n    scores,\n    scoresTensor.shape[1],\n    scoresTensor.shape[2]\n  );\n\n  const prevBackend = tf.getBackend();\n  tf.setBackend('cpu');\n\n  const indexTensor = tf.tidy(() =>\n    tf.image.nonMaxSuppression(\n      tf.tensor2d(\n        boxes,\n        [boxesTensor.shape[1], boxesTensor.shape[3]]\n      ),\n      maxScores,\n      20,\n      0.5,\n      0.5\n    ),\n  );\n\n  const indexes = indexTensor.dataSync();\n  indexTensor.dispose();\n\n  tf.setBackend(prevBackend);\n\n  return [...indexes].map((index) => ({\n    boundingBox: buildBoundingBoxForResult(index, width, height, boxes),\n    class: labels[Math.round(classes[index])],\n    score: maxScores[index],\n  }));\n}\n\nfunction calculateMaxScores(scores, numberOfBoxes, numberOfClasses) {\n  const maxes = [];\n  const classes = [];\n\n  for (let i = 0; i < numberOfBoxes; i++) {\n    let max = Number.MIN_VALUE;\n    let index = -1;\n    for (let j = 0; j < numberOfClasses; j++) {\n      if (scores[i * numberOfClasses + j] > max) {\n        max = scores[i * numberOfClasses + j];\n        index = j;\n      }\n    }\n    maxes[i] = max;\n    classes[i] = index;\n  }\n\n  return [maxes, classes];\n}\n\nfunction buildBoundingBoxForResult(\n  index,\n  width,\n  height,\n  boxes,\n) {\n  const boundingBox = [];\n\n  for (let i = 0; i < 4; i++) {\n    boundingBox[i] = boxes[index * 4 + i];\n  }\n\n  const minY = boundingBox[0] * height;\n  const minX = boundingBox[1] * width;\n  const maxY = boundingBox[2] * height;\n  const maxX = boundingBox[3] * width;\n\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY,\n  };\n}\n","import React, {useState, useCallback} from 'react';\nimport {Card, TextField as PolarisTextField} from '@shopify/polaris';\n\nfunction TextField() {\n  const [value, setValue] = useState('');\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n  return (\n    <Card sectioned>\n      <PolarisTextField label=\"Text field\" value={value} onChange={handleChange} />\n    </Card>\n  );\n}\n\nexport default TextField;\n","import React, {useState} from 'react';\nimport {Card, ResourceList, ResourceItem, Avatar, TextStyle} from '@shopify/polaris';\n\nfunction CustomerList() {\n  return (\n    <Card>\n      <ResourceList\n        resourceName={{singular: 'customer', plural: 'customers'}}\n        items={[\n          {\n            id: 341,\n            url: 'customers/341',\n            name: 'Mae Jemison',\n            location: 'Decatur, USA',\n          },\n          {\n            id: 256,\n            url: 'customers/256',\n            name: 'Ellen Ochoa',\n            location: 'Los Angeles, USA',\n          },\n          {\n            id: 214,\n            url: 'customers/213',\n            name: 'John Divee',\n            location: 'Ottawa, Canada',\n          }\n        ]}\n        renderItem={(item) => {\n          const {id, url, name, location} = item;\n          const media = <Avatar customer size=\"medium\" name={name} />;\n\n          return (\n            <ResourceItem\n              id={id}\n              url={url}\n              media={media}\n              accessibilityLabel={`View details for ${name}`}\n            >\n              <h3>\n                <TextStyle variation=\"strong\">{name}</TextStyle>\n              </h3>\n              <div>{location}</div>\n            </ResourceItem>\n          );\n        }}\n      />\n    </Card>\n  );\n}\n\nexport default CustomerList;\n","import React from 'react';\nimport {AppProvider, Page} from '@shopify/polaris';\nimport \"@shopify/polaris/styles.css\";\n\nimport TextField from './components/TextField';\nimport CustomerList from './components/CustomerList';\n\nfunction Prototype({components}) {\n  const hasPage = components.includes('Page');\n  return (\n    <AppProvider>\n      <Page\n        title={hasPage ? 'Page' : null}\n        primaryAction={hasPage ? {content: 'Save'} : null}\n      >\n        {components.map((name, idx) => {\n          switch(name) {\n            case 'TextField':\n              return <TextField key={idx} />;\n            case 'CustomerList':\n                return <CustomerList key={idx} />;\n          }\n        })}\n      </Page>\n    </AppProvider>\n  );\n}\n\nexport default Prototype;\n","import React, {useCallback, useEffect, useMemo, useState, useRef} from 'react';\nimport ReactDOM from 'react-dom';\nimport imageObjectDetector from './object-detector';\nimport Prototype from './Prototype';\nimport './main.scss';\n\nfunction App() {\n  const reader = useMemo(() => new FileReader(), []);\n  const imageRef = useRef();\n  const filePickerRef = useRef();\n  const canvasRef = useRef();\n\n  const [image, setImage] = useState('');\n  const [status, setStatus] = useState('Upload a wireframe drawing');\n  const [results, setResults] = useState([]);\n  const isLoading = status === 'Loading...';\n\n  const canvasSizes = useMemo(() => {\n    const canvasWidth = (window.innerWidth < 600 ? window.innerWidth : 600) - (3*16);\n    return {\n      width: canvasWidth,\n      height: canvasWidth - 100,\n    };\n  }, [window.innerWidth]);\n\n  const handleImageChange = useCallback(({target: {files: [selectedFile]}}) => {\n    if (!selectedFile) {\n      return;\n    }\n    reader.readAsDataURL(selectedFile);\n  }, [reader]);\n\n  useEffect(\n    () => reader.addEventListener('load', ({target: {result: src}}) => detectOnImagePath(src)),\n    [reader]\n  );\n\n  const handleShowExampleClick = useCallback(() => detectOnImagePath('wireframe-example.jpg'), []);\n\n  const openFilePicker = useCallback(() => {\n    if (isLoading) {\n      return;\n    }\n    filePickerRef.current.click();\n  }, [isLoading]);\n\n  const detectOnImagePath = useCallback(async (src) => {\n    if (isLoading) {\n      return;\n    }\n\n    setImage(src);\n    clearCanvas(canvasRef.current);\n\n    setStatus('Loading...');\n    setResults([]);\n\n    const detectOnImage = await imageObjectDetector('model');\n    const results = await detectOnImage(imageRef.current);\n    console.log(results);\n\n    if (results.length > 0) {\n      setStatus('Upload a wireframe drawing');\n      drawResultBoxes(canvasRef.current, results);\n      setResults(results);\n    } else {\n      setStatus('No components detected. Please try again or check the console for the raw output.');\n    }\n  }, [isLoading, canvasRef, imageRef]);\n\n  const componentNames = results.map(({class: label}) => label);\n  console.log(componentNames);\n\n  return (\n    <>\n      <main className=\"control-board\">\n        <p className=\"intro container\">\n          This <a href=\"https://github.com/kvendrik/polaris-whiteboarder\" target=\"_blank\" rel=\"noopener noreferrer\">experiment</a> creates simple <a href=\"https://polaris.shopify.com\" target=\"_blank\" rel=\"noopener noreferrer\">Polaris</a> prototypes from <a href=\"https://github.com/kvendrik/polaris-ml/tree/master/training-data\" target=\"_blank\" rel=\"noopener noreferrer\">wireframes drawn on a whiteboard</a>.\n        </p>\n        <section className=\"result-status container\">\n          <p>\n            <button className=\"status\" onClick={openFilePicker}>{status}</button>\n            <br />\n            <small>Don't feel like drawing? <button onClick={handleShowExampleClick}>View an example</button></small>\n          </p>\n          <div className=\"image-container\">\n            <canvas className=\"image-container__canvas\" ref={canvasRef} width={canvasSizes.width} height={canvasSizes.height} />\n            <img src={image} ref={imageRef} alt=\"\" width={canvasSizes.width} height={canvasSizes.height} />\n          </div>\n          <input className=\"file-picker\" ref={filePickerRef} type=\"file\" onChange={handleImageChange} />\n        </section>\n      </main>\n      {results.length > 0 && (\n        <>\n          <hr />\n          <Prototype components={componentNames} />\n        </>\n      )}\n    </>\n  );\n}\n\nfunction clearCanvas(canvas) {\n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n}\n\nfunction drawResultBoxes(canvas, results) {\n  const ctx = canvas.getContext('2d');\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  const font = '14px Open Sans';\n  const textHeight = parseInt(font, 10);\n\n  ctx.font = font;\n  ctx.textBaseline = 'top';\n  ctx.strokeStyle = '#2da15f';\n  ctx.lineWidth = 4;\n  ctx.fillStyle = '#2da15f';\n\n  for (const {class: label, score, boundingBox: {x, y, width, height}} of results) {\n    ctx.strokeRect(x, y, width, height);\n    const textWidth = ctx.measureText(constructLabel(label, score)).width;\n    ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n  }\n\n  for (const {class: label, score, boundingBox: {x, y}} of results) {\n    ctx.fillStyle = '#000000';\n    ctx.fillText(constructLabel(label, score), x, y);\n  }\n\n  function constructLabel(classLabel, score) {\n    return `${classLabel} (${Math.round(score*100)}%)`;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}